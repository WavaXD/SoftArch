@startuml

class Paros{
   - log : Log = null
   - cmdLine : CommandLine = null
   + {static} main(args : String[]): void
   - init(args : String[]) : void
   - run() : void
   - runCommandLine() : void
   - runGUI() : void
   - showLicense() : void
   - checkUpdate() : void
}

class Constant{
   + {static} FILE_CONFIG_DEFAULT : String = "xml/config.xml"
   + FILE_CONFIG : String = "config.xml"
   + {static} FOLDER_PLUGIN : String = "plugin"
   + {static} FOLDER_FILTER : String = "filter"
   + {static} FOLDER_SESSION_DEFAULT = "session"
   + FOLDER_SESSION : String = "session"
   + {static} getEyeCatcher() : String
   + {static} setEyeCatcher(eyeCatcher : String) : void
   + {static} setSP(isSP : boolean) : void
   + {static} isSP() : boolean
   + Constant()
}


abstract class FileXML{
   # doc : Document = null
   # docBuilder : DocumentBuilder = null
   # docBuilderFactory : DocumentBuilderFactory = null
   + FileXML(rootElementName String)
   + getDocument() : Document
   - getText(element : Element) : String
}

abstract class AbstractParam{
   - config : FileConfiguration = null
   + load(config FileConfiguration) : void
   + load(fileName String) : void
   + load() : void
   + getConfig() : FileConfiguration
   # {abstract} parse() : void
}

class Database{
   - {static} database : Database = null
   - databaseServer : DatabaseServer = null
   - listenerList : Vector
   + Database()
   + getDatabaseServer() : DatabaseServer
   - setDatabaseServer(databaseServer : DatabaseServer) : void
}

class Control{
   - {field}{static} log : Log = LogFactory.getLog(Control.class)
   - {field}{static} control : Control = null
   - proxy : Proxy = null
   - menuFileControl : MenuFileControl = null
   - Control(model : Model, view : View)
   - init() : void
   + getProxy() : Proxy
   + runComandLineNewSession(fileName String) : void
   + shutdown(compact boolean) : void
}

abstract class AbstractControl{
   # loader : ExtensionLoader = null
   # model : Model = null
   # view : View = null
   + AbstractControl(model : Model, view : View)
   # loadExtension() : void
   # {abstract} addExtension() : void
   # addCommonExtension() : void
   + shutdown(compact boolean) : void
}

class Proxy{
   - model : Model = null
   - proxyServer : ProxyServer = null
   - proxyServerSSL : ProxyServerSSL = null
   - reverseProxy : boolean = false
   + Proxy(model : Model)
   + startServer() : void
   + stopServer() : void
}

class MenuFileControl{
   - {field}{static} log : Log = LogFactory.getLog(MenuFileControl.class)
   - model : Model = null
   - control : Control = null
   - waitMessageDialog : WaitMessageDialog = null
   + MenuFileControl(model : Model , view : View, : control : Control)
   + exit() : void
   + newSession(isPromptNewSession boolean) : void
   + openSession() : void
}

class MenuToolsControl{
   - view : View = null
   - model : Model = null
   - control : Control = null
   + MenuToolsControl()
   + MenuToolsControl(model : Model , view : View , control : Control)
   + options() : void
}

class ViewDelegate{
   + getMainFrame() : MainFrame
   + getSiteTreePanel() : SiteMapPanel
   + getOutputPanel() : OutputPanel
   + setStatus(msg String) : void
}

class Model{
   - {field}{static} model : Model = null
   - {field}{static} DBNAME_TEMPLATE : String = Constant.DBNAME_TEMPLATE
   - {field}{static} DBNAME_UNTITLED = String = Constant.getInstance().DBNAME_UNTITLED
   - {static}DBNAME_COPY : int = 1
   - session : Session = null
   + Model()
   + getOptionsParam() : OptionsParam
   + setOptionsParam(param OptionsParam) : void
   + getSession() : Session
   + getDb() : Database
}

class Session{
   - {static} ROOT : String = "session"
   - {static} SESSION_ID = : String ="sessionId"
   - sessionId : long = 0
   + Session(model : Model):
   + discard() : void
   + getSessionId() : long
}

class OptionsParam{
   - paramSetList : Vector
   - config : XMLConfiguration = null
   - gui : boolean = true
   - userDirectory : File = null
   + getConnectionParam() : ConnectionParam
   + getProxyParam() : ProxyParam
   + setProxyParam(proxyParam : ProxyParam) : void
   # parse() : void
}

class HttpUtil{
   + {static} encodeURI(uri String) : String
   + {static} sleep(ms int) : void
   + {static} closeServerSocket(socket ServerSocket) : void
   + {static} closeSocket(socket Socket) : void
   + {static} closeInputStream(in InputStream) : void
   + {static} closeOutputStream(out OutputStream) : void
}

class ProxyServer{
    # thread : Thread = null
    # {static} PORT_TIME_OUT : int = 0
    # isProxyRunning : boolean = false
    + isEnableCacheProcessing() : boolean
    + setEnableCacheProcessing(enableCacheProcessing : boolean) : void
    + getProxyParam() : ProxyParam
}

class ProxyServerSSL{
    - {field}{static} ssl : SSLConnector = HttpSender.getSSLConnector()
    + ProxyServerSSL()
    # createServerSocket(ip : String , port int) : ServerSocket
    # createProxyProcess(clientSocket : Socket) : ProxyThread
}

class ProxyParam{
    - {field}{static} PROXY_IP : String = "proxy.ip"
    - {field} proxyIp : String = "localhost"
    - {field} proxyPort : int = 8000
    + ProxyParam()
    # parse() : void
    + getProxyIp() : String
    + setProxyIp(proxyIp : String) : void
}

class ProxyThread{
    - {static} TIME_OUT : int = 60000
    - {field}{static} log : Log = LogFactory.getLog(ProxyThread.class)
    # thread : Thread = null
    + start() : void
    - beginSSL() : void
    + run() : void
}

class View{
    - {static} view : View = null
    - sessionDialog : SessionDialog = null
    - optionsDialog : OptionsDialog = null
    + getMainFrame() : MainFrame
    + init() : void
    + postInit() : void
    + {static} getSingletion() : View
}

'Paros section
'Use method from other class
Paros ..> Constant : <<use>>

' Control section
Control --* Proxy
Control --* MenuToolsControl
Control --* MenuFileControl
'Get parameter from other class so it's aggregation
Control --o Model
Control --o View
'Use method from other class
Control ..> Model : <<use>>
Control ..> Session : <<use>>
' create instance of other class (line 150 of Control.java)
Control --> Session
'Control extended
Control --|> AbstractControl 

'MenuFileControl section
MenuFileControl ..* View
MenuFileControl ..* Model
MenuFileControl ..* Control
'Use method from other class
MenuFileControl ..> Model : <<use>>
MenuFileControl ..> Control : <<use>>
MenuFileControl ..> View : <<use>>
MenuFileControl ..> Session : <<use>>
' create instance of other class
MenuFileControl --> Session
'MenuFileControl implements
MenuFileControl ..|> SessionListener

'AbstractControl section
AbstractControl ..* Model
AbstractControl ..* View
'Use method from other class
AbstractControl ..> Model : <<use>>

'MenuToolsControl section
MenuToolsControl ..* View
MenuToolsControl ..* Model
MenuToolsControl ..* Control
'Use method from other class
MenuToolsControl ..> View : <<use>>
MenuToolsControl ..> Model : <<use>>
MenuToolsControl ..> Control : <<use>>

'Proxy section
Proxy ..* Model
' create instance of other class
Proxy --> ProxyServerSSL
Proxy --> ProxyServer
'Use method from other class
Proxy ..> proxyServer : <<use>>
Proxy ..> proxyServerSSL : <<use>>
Proxy ..> Model : <<use>>

'View section
View --o AbstractControl
View --o MenuToolsControl
'View implements
View ..|> ViewDelegate

'Model section
Model ..* Session
Model ..* OptionsParam
Model ..* Database
'Get parameter from other class so it's aggregation (line 43)
Model --o Constant
' create instance of other class
Model --> Session
Model --> OptionsParam
'User method from other class
Model ..> Database : <<use>>
Model ..> Constant: <<use>>

'ProxyServerSSL section
ProxyServerSSL ..* ProxyThread
'ProxyServerSSL extends
ProxyServerSSL --|> ProxyServer

'ProxyServer section
ProxyServer ..* ProxyParam
ProxyServer ..* ProxyThread
'create instance of other class
ProxyServer --> ProxyParam
ProxyServer --> ProxyThread
'Use method from other class
ProxyServer ..> HttpUtil : <<use>
ProxyServer ..> ProxyThread : <<use>>
'line 538 of ProxyThread.java
ProxyServer ..> Model : <<use>
'ProxyServer implements
ProxyServer ..|> Runnable

'Session section
Session ..* Model
'Use method from otherclass
Session ..> Model : <<use>>
Session ..> Constant : <<use>>
'Session extends
Session --|> FileXML

'Database section
'self instance ? (line 104 of Database.java)
Database --> Database

'OptionsParam section
OptionsParam ..* ProxyParam
OptionsParam ..* AbstractParam
'create instance of other class
OptionsParam --> ProxyParam
'Use method from other class
OptionsParam ..> Constant : <<use>>
'OptionsParam extends
OptionsParam --|> AbstractParam

'ProxyThread section
ProxyThread ..* ProxyServer
ProxyThread ..* ProxyParam
ProxyThread ..* ProxyThread
'Use method from other class
ProxyThread ..> HttpUtil : <<use>>
ProxyThread ..> ProxyParam : <<use>>
ProxyThread ..> Model : <<use>>

ProxyThread ..> ProxyParam
'ProxyThread implements
ProxyThread ..|> Runnable

AbstractControl --> Model
FileXML ..> Constant : <<use>>
@enduml

'Wayu Saengphithak 63015161